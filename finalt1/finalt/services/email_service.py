# services/email_service.py - Pure Python email service for Streamlit
import os
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, List
from dotenv import load_dotenv
import streamlit as st

load_dotenv()

class EmailConfig:
    """Email configuration for Streamlit"""
    def __init__(self):
        self.mail_server = os.getenv('MAIL_SERVER', 'smtp.gmail.com')
        self.mail_port = int(os.getenv('MAIL_PORT', '587'))
        self.mail_use_tls = os.getenv('MAIL_USE_TLS', 'true').lower() == 'true'
        self.mail_use_ssl = os.getenv('MAIL_USE_SSL', 'false').lower() == 'true'
        self.mail_username = os.getenv('MAIL_USERNAME')
        self.mail_password = os.getenv('MAIL_PASSWORD')
        self.mail_default_sender = os.getenv('MAIL_DEFAULT_SENDER', self.mail_username)
        self.mail_enabled = self._check_email_config()
    
    def _check_email_config(self) -> bool:
        """Check if email configuration is valid"""
        if not self.mail_username or self.mail_username == 'your_email@gmail.com':
            return False
        if not self.mail_password or self.mail_password == 'your_app_password_here':
            return False
        return True

# Global email config instance
email_config = EmailConfig()

def send_shortlist_email(candidate_email: str, candidate_name: str, job_title: str, company_name: str) -> Dict:
    """Send a shortlisted notification email to a candidate using pure Python SMTP"""
    try:
        # Check if email is enabled
        if not email_config.mail_enabled:
            return {
                "success": False, 
                "message": "Email service not configured. Please set up email credentials in .env file."
            }
        
        # Validate email address
        if not candidate_email or '@' not in candidate_email:
            return {
                "success": False,
                "message": "Invalid email address provided"
            }
        
        subject = f"ðŸŽ‰ Congratulations! You've been shortlisted for {job_title} at {company_name}"
        
        # Plain text body
        text_body = f"""
Dear {candidate_name},

ðŸŽ‰ CONGRATULATIONS! ðŸŽ‰

We are thrilled to inform you that your resume has achieved a relevance score of 65% or higher in our Automated Resume Relevance Check System for the position of {job_title} at {company_name}.

Your qualifications, skills, and experience have been evaluated using our AI-powered system, and you have successfully met our shortlisting criteria. This places you among the top candidates for this role.

WHAT HAPPENS NEXT:
â€¢ Our placement team will contact you within the next 2-3 business days
â€¢ You will receive detailed information about the interview process
â€¢ Further assessment rounds (if applicable) will be communicated

We were particularly impressed with your profile and believe you would be a great fit for our team.

Thank you for your interest in joining {company_name}. We look forward to the next steps in the recruitment process.

Best regards,
Placement Team
{company_name}

---
This email was generated by our Automated Resume Relevance Check System.
"""

        # HTML body
        html_body = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #7f5af0, #ff5470); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }}
        .footer {{ text-align: center; margin-top: 20px; color: #666; font-size: 12px; }}
        .btn {{ display: inline-block; background: #7f5af0; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; margin: 10px 0; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸŽ‰ Congratulations!</h1>
            <h2>You've been shortlisted!</h2>
        </div>
        <div class="content">
            <p>Dear <strong>{candidate_name}</strong>,</p>
            
            <p>We are pleased to inform you that you have been <strong>shortlisted</strong> for the position of <strong>{job_title}</strong> at <strong>{company_name}</strong>.</p>
            
            <p>Your application has been reviewed and we were impressed with your qualifications and experience. We would like to move forward with the next stage of our recruitment process.</p>
            
            <p>Our team will be in touch with you shortly with further details about the next steps.</p>
            
            <p>Thank you for your interest in joining our team.</p>
            
            <p>Best regards,<br>
            <strong>{company_name} Recruitment Team</strong></p>
        </div>
        <div class="footer">
            <p>This email was sent automatically by ResumeMatch AI recruitment system.</p>
        </div>
    </div>
</body>
</html>
"""

        # Create message
        message = MIMEMultipart("alternative")
        message["Subject"] = subject
        message["From"] = email_config.mail_default_sender
        message["To"] = candidate_email

        # Create the plain-text and HTML version of your message
        part1 = MIMEText(text_body, "plain")
        part2 = MIMEText(html_body, "html")

        # Add HTML/plain-text parts to MIMEMultipart message
        message.attach(part1)
        message.attach(part2)

        # Create secure connection and send email
        if email_config.mail_use_ssl:
            context = ssl.create_default_context()
            with smtplib.SMTP_SSL(email_config.mail_server, email_config.mail_port, context=context) as server:
                server.login(email_config.mail_username, email_config.mail_password)
                server.sendmail(email_config.mail_default_sender, candidate_email, message.as_string())
        else:
            with smtplib.SMTP(email_config.mail_server, email_config.mail_port) as server:
                if email_config.mail_use_tls:
                    server.starttls()
                server.login(email_config.mail_username, email_config.mail_password)
                server.sendmail(email_config.mail_default_sender, candidate_email, message.as_string())
        
        return {"success": True, "message": f"Email sent successfully to {candidate_email}"}
        
    except Exception as e:
        error_msg = f"Failed to send email to {candidate_email}: {str(e)}"
        print(error_msg)  # Log error
        return {"success": False, "message": error_msg}

def send_bulk_shortlist_emails(candidates_data: List[Dict]) -> List[Dict]:
    """Send shortlist emails to multiple candidates using pure Python SMTP"""
    results = []
    
    for candidate_data in candidates_data:
        result = send_shortlist_email(
            candidate_email=candidate_data['email'],
            candidate_name=candidate_data['name'],
            job_title=candidate_data['job_title'],
            company_name=candidate_data['company_name']
        )
        results.append({
            "candidate": candidate_data['name'],
            "email": candidate_data['email'],
            "status": result
        })
    
    return results

def test_email_configuration() -> Dict:
    """Test email configuration"""
    if not email_config.mail_enabled:
        return {
            "success": False,
            "message": "Email configuration not set up. Please configure your email credentials in .env file.",
            "instructions": "Check the .env file and ensure MAIL_USERNAME and MAIL_PASSWORD are set correctly."
        }
    
    return {
        "success": True,
        "message": f"Email configuration is valid. Ready to send emails from {email_config.mail_username}",
        "config": {
            "server": email_config.mail_server,
            "port": email_config.mail_port,
            "use_tls": email_config.mail_use_tls,
            "use_ssl": email_config.mail_use_ssl,
            "sender": email_config.mail_default_sender
        }
    }

def send_test_email(test_email: str) -> Dict:
    """Send a test email to verify configuration"""
    return send_shortlist_email(
        candidate_email=test_email,
        candidate_name="Test Candidate",
        job_title="Test Position",
        company_name="Test Company"
    )
